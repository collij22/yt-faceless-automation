{
  "name": "YouTube Analytics Production",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-analytics",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        400
      ]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "channel_id",
              "value": "={{$json[\"channel_id\"] || \"UC_default\"}}"
            },
            {
              "name": "date_range",
              "value": "={{$json[\"date_range\"] || \"last_30_days\"}}"
            },
            {
              "name": "start_date",
              "value": "={{$json[\"start_date\"] || new Date(Date.now() - 30*24*60*60*1000).toISOString().split('T')[0]}}"
            },
            {
              "name": "end_date",
              "value": "={{$json[\"end_date\"] || new Date().toISOString().split('T')[0]}}"
            }
          ],
          "boolean": [
            {
              "name": "include_demographics",
              "value": "={{$json[\"include_demographics\"] !== false}}"
            },
            {
              "name": "include_traffic",
              "value": "={{$json[\"include_traffic_sources\"] !== false}}"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare",
      "name": "Prepare Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        450,
        400
      ]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "number": [
            {
              "name": "total_views",
              "value": "={{Math.floor(Math.random() * 100000) + 10000}}"
            },
            {
              "name": "total_watch_hours",
              "value": "={{Math.floor(Math.random() * 5000) + 500}}"
            },
            {
              "name": "subscriber_change",
              "value": "={{Math.floor(Math.random() * 1000) - 100}}"
            },
            {
              "name": "estimated_revenue",
              "value": "={{(Math.random() * 1000).toFixed(2)}}"
            },
            {
              "name": "avg_view_duration",
              "value": "={{Math.floor(Math.random() * 300) + 60}}"
            },
            {
              "name": "ctr_percentage",
              "value": "={{(Math.random() * 10).toFixed(2)}}"
            }
          ]
        },
        "options": {}
      },
      "id": "mock_metrics",
      "name": "Mock Metrics",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        650,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"include_demographics\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "check_demo",
      "name": "Check Demographics",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        850,
        400
      ]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "top_age_group",
              "value": "25-34"
            },
            {
              "name": "top_gender",
              "value": "male"
            },
            {
              "name": "top_country",
              "value": "United States"
            }
          ],
          "number": [
            {
              "name": "male_percentage",
              "value": "={{Math.floor(Math.random() * 30) + 40}}"
            },
            {
              "name": "female_percentage",
              "value": "={{Math.floor(Math.random() * 30) + 30}}"
            }
          ]
        },
        "options": {}
      },
      "id": "add_demo",
      "name": "Add Demographics",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "demographics",
              "value": "not_included"
            }
          ]
        },
        "options": {}
      },
      "id": "no_demo",
      "name": "No Demographics",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1050,
        500
      ]
    },
    {
      "parameters": {
        "mode": "append",
        "options": {}
      },
      "id": "merge_demo",
      "name": "Merge Demographics",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1250,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"include_traffic\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "check_traffic",
      "name": "Check Traffic",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1450,
        400
      ]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "top_source",
              "value": "YouTube Search"
            },
            {
              "name": "top_search_term",
              "value": "tutorial"
            }
          ],
          "number": [
            {
              "name": "search_percentage",
              "value": "={{Math.floor(Math.random() * 20) + 30}}"
            },
            {
              "name": "suggested_percentage",
              "value": "={{Math.floor(Math.random() * 20) + 20}}"
            }
          ]
        },
        "options": {}
      },
      "id": "add_traffic",
      "name": "Add Traffic Sources",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1500,
        300
      ]
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "traffic_sources",
              "value": "not_included"
            }
          ]
        },
        "options": {}
      },
      "id": "no_traffic",
      "name": "No Traffic",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1500,
        500
      ]
    },
    {
      "parameters": {
        "mode": "append",
        "options": {}
      },
      "id": "merge_traffic",
      "name": "Merge Traffic",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1700,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "// Generate insights and final response with robust error handling\ntry {\n  // Get all input items and merge their data\n  const allItems = $input.all();\n  if (!allItems || allItems.length === 0) {\n    throw new Error('No input data received');\n  }\n  \n  // Combine all data from all input items\n  const data = {};\n  allItems.forEach(item => {\n    if (item && item.json) {\n      Object.assign(data, item.json);\n    }\n  });\n  \n  // Generate insights based on metrics\n  const insights = [];\n  const recommendations = [];\n  \n  // Safe number checking with defaults\n  const ctr = parseFloat(data.ctr_percentage) || 0;\n  const avgDuration = parseInt(data.avg_view_duration) || 0;\n  const subChange = parseInt(data.subscriber_change) || 0;\n  \n  if (ctr < 5) {\n    insights.push('Low click-through rate detected');\n    recommendations.push('Improve thumbnails and titles');\n  }\n  \n  if (avgDuration < 120) {\n    insights.push('Short average view duration');\n    recommendations.push('Improve video hooks and pacing');\n  }\n  \n  if (subChange < 0) {\n    insights.push('Losing subscribers');\n    recommendations.push('Review content quality and consistency');\n  }\n  \n  return [{\n    json: {\n      status: 'success',\n      message: 'Analytics retrieved successfully',\n      debug_data_keys: Object.keys(data), // Debug info\n      channel: {\n        id: data.channel_id || 'unknown',\n        period: {\n          start: data.start_date || new Date().toISOString().split('T')[0],\n          end: data.end_date || new Date().toISOString().split('T')[0],\n          range: data.date_range || 'unknown'\n        }\n      },\n      metrics: {\n        views: parseInt(data.total_views) || 0,\n        watch_hours: parseInt(data.total_watch_hours) || 0,\n        subscriber_change: subChange,\n        revenue: parseFloat(data.estimated_revenue) || 0.0,\n        avg_view_duration: avgDuration,\n        ctr: ctr\n      },\n      demographics: data.top_age_group ? {\n        age_group: data.top_age_group,\n        gender_split: {\n          male: parseInt(data.male_percentage) || 0,\n          female: parseInt(data.female_percentage) || 0\n        },\n        top_location: data.top_country || 'Unknown'\n      } : null,\n      traffic: data.top_source ? {\n        top_source: data.top_source,\n        search_percentage: parseInt(data.search_percentage) || 0,\n        suggested_percentage: parseInt(data.suggested_percentage) || 0,\n        top_search_term: data.top_search_term || 'N/A'\n      } : null,\n      insights: insights.length > 0 ? insights : ['Channel performing within normal parameters'],\n      recommendations: recommendations.length > 0 ? recommendations : ['Continue current strategy'],\n      generated_at: new Date().toISOString()\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      status: 'error',\n      message: 'Analytics processing failed: ' + error.message,\n      debug_error: error.stack,\n      generated_at: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "generate_insights",
      "name": "Generate Insights",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1900,
        400
      ]
    }
  ],
  "connections": {
    "webhook": {
      "main": [
        [
          {
            "node": "prepare",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare": {
      "main": [
        [
          {
            "node": "mock_metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mock_metrics": {
      "main": [
        [
          {
            "node": "check_demo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_demo": {
      "main": [
        [
          {
            "node": "add_demo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no_demo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add_demo": {
      "main": [
        [
          {
            "node": "merge_demo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "no_demo": {
      "main": [
        [
          {
            "node": "merge_demo",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "merge_demo": {
      "main": [
        [
          {
            "node": "check_traffic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_traffic": {
      "main": [
        [
          {
            "node": "add_traffic",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "no_traffic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add_traffic": {
      "main": [
        [
          {
            "node": "merge_traffic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "no_traffic": {
      "main": [
        [
          {
            "node": "merge_traffic",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "merge_traffic": {
      "main": [
        [
          {
            "node": "generate_insights",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}